package com.mycompany.app.Client.GUI;

import com.google.gson.JsonObject;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.util.Observable;
import java.util.Observer;
import java.util.concurrent.TimeUnit;

public class MainLayout extends Observable implements Observer {

    private JTextField textField1;
    private JDialog errorDialog;
    private JFrame frame;

    @Override
    public void update(Observable o, Object arg) {
        try {
            JsonObject json = (JsonObject) arg;
            String type = json.get("type").getAsString();
            System.out.println(type);

            switch (type) {
                case "nameChange":
                    System.out.println("MAin layout as receive nameChange" + json.get("value").getAsString());
                    setChanged();
                    notifyObservers(json);
                    break;
                default:
                    throw new Exception("Unknown type");
            }


        } catch (Exception e) {
            System.out.println("Unknown Exception : " + e);
        }

    }

    private ConnectingGUI my_connectingGUI;
    private NameChooser my_nameChooser;

    public MainLayout() {
        frame = new JFrame("LuluChat");
        errorDialog = new JDialog(frame);

        my_connectingGUI = new ConnectingGUI();
        my_nameChooser = new NameChooser();

        textField1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println(textField1.getText());
            }
        });

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setSize(screenSize);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);

        errorDialog.add(my_connectingGUI.getMainLabel());
        errorDialog.pack();
        errorDialog.setLocationRelativeTo(null);
        errorDialog.setVisible(true);
    }

    public void print_error_msg(String type) {
        switch (type) {
            case "ConnectError":
                System.out.println("ere");
                my_connectingGUI.getMainLabel().setText("Cannot connect to Server");
                my_connectingGUI.getMainLabel().setForeground(new Color(-62976));
                try {
                    TimeUnit.SECONDS.sleep(1);
                    errorDialog.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
                    frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
                } catch (Exception e) {
                    frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
                    errorDialog.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
                }
                break;
            case "fef":
                break;
            default:
                break;
        }
    }


    public void rm_modal() {
        errorDialog.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
    }

    public void sh_user_name() {
        System.out.println("zds");
        my_nameChooser.addObserver(this);
        frame.add(my_nameChooser.getPanel1());

        //frame.setSize(new Dimension(200, 300));
        frame.setVisible(true);

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("ChatSocks");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField1 = new JTextField();
        panel1.add(textField1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Choose a username");
        panel1.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }


}
